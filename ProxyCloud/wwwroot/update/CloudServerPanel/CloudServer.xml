<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CloudServer</name>
    </assembly>
    <members>
        <member name="T:CloudServer.Communication">
            <summary>
            Class used for encrypted communication with the proxy. The proxy communicates with an encrypted REST API protocol with clients that need access to the cloud with this protocol
            </summary>
        </member>
        <member name="F:CloudServer.Communication.Command.Pair">
            <summary>
            Used to pair the device via the public key hash
            </summary>
        </member>
        <member name="F:CloudServer.Communication.Command.GetPushNotifications">
            <summary>
            Command that is used only by the browser application to ask the proxy if there are new commands to execute
            </summary>
        </member>
        <member name="F:CloudServer.Communication.Command.Error">
            <summary>
            Command used by the browser, to request the avatar image of a contact
            </summary>
        </member>
        <member name="F:CloudServer.Communication.Command.Share">
            <summary>
            Used to send files in the form of chunks (packets), encapsulated in encrypted json objects
            </summary>
        </member>
        <member name="T:CloudServer.Communication.Purpose">
            <summary>
            Indicates who the command is intended for (proxy or browser), and possibly the purpose
            </summary>
        </member>
        <member name="F:CloudServer.Communication.Purpose.GetPushNotifications">
            <summary>
            Parameter used only for communication between browser and proxy to read any push messages sent by the device
            </summary>
        </member>
        <member name="F:CloudServer.Communication.Purpose.SetClient">
            <summary>
            Used only in debug mode to send the public key from the browser to the device. normally the public key must be scanned by the QR code
            The public key is not encrypted because the exchange of cryptographic keys has not yet taken place.
            </summary>
        </member>
        <member name="M:CloudServer.Communication.SendCommand(CloudSync.Client,CloudServer.Communication.Command,CloudServer.Communication.Purpose,System.Byte[][])">
            <summary>
            Send a command to the browser via the proxy (the command has parameters)
            </summary>
            <param name="command">Command</param>
            <param name="values"></param>
        </member>
        <member name="M:CloudServer.Communication.SendCommandWithEncryptRsa256(System.Byte[],CloudServer.Communication.Command,System.Byte[],System.Byte[][])">
            <summary>
            Send a command to the browser via the proxy (the command has parameters)
            </summary>
            <param name="command">Command</param>
            <param name="values"></param>
        </member>
        <member name="M:CloudServer.Communication.SendCommandToProxy(CloudServer.Communication.Purpose,System.Byte[][])">
            <summary>
            Send a command to the browser via the proxy (the command has parameters)
            </summary>
            <param name="purpose">Command</param>
            <param name="values"></param>
        </member>
        <member name="M:CloudServer.Communication.ProcessIncomingCommand(System.UInt64,CloudServer.Communication.Purpose,System.Byte[],System.String,System.String)">
            <summary>
            When the user performs operations in the browser, he sends commands to the device that responds with the same command name and sends the requested information by encrypting it with the public key scanned via the QR code. Any data and parameters received are encrypted with the key generated by the device (the key was previously securely sent to the browser when pairing was performed).
            </summary>
            <param name="purpose">Purpose</param>
            <param name="encryptedData">Data</param>
            <param name="host">Mandatory data only for the SetEncriptionKey command, be careful because this data is not TrustLess, it can be altered by the proxy, it is required only for access log functionality</param>
            <param name="userAgent">Mandatory data only for the SetEncriptionKey command, be careful because this data is not TrustLess, it can be altered by the proxy, it is required only for access log functionality</param>
        </member>
        <member name="M:CloudServer.EncryptionRsa.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypt the data with the public key - RSA-OAEP-256
            Used internally to encrypt with the public key generated by the browser. The production key is passed to the device with a scanned QR code
            </summary>
            <param name="data">Data to be encrypted must be maximum 190 bytes</param>
            <param name="modulus">Modulus</param>
            <param name="exponent">Exponent</param>
            <returns>Encrypted data 256 bytes</returns>
        </member>
        <member name="M:CloudServer.Server.#ctor(System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            Create a new server cloud
            </summary>
            <param name="id">Id</param>
            <param name="entryPoint"><inheritdoc cref="P:CloudServer.Server.DefaultEntryPoint"/></param>
            <param name="cloudPath"><inheritdoc cref="P:CloudServer.Server.DefaultCloudPath"/></param>
            <param name="licenseOEM"><inheritdoc cref="P:CloudServer.Server.DefaultLicenseOEM"/></param>
        </member>
        <member name="M:CloudServer.Server.IsReadyForRestart">
            <summary>
            If there is no communication with the client the server can be restarted, so it will return true
            </summary>
            <returns>Is ready for restart</returns>
        </member>
        <member name="M:CloudServer.Server.Initialize(System.String,System.String,System.String,System.String)">
            <summary>
            Initializer: When the QR code in the website is scanned, the connection between the website and the device is created by initializing this class. The public key generated in the browser is passed with the QR code, and used to create an instance of this class
            </summary>
            <param name="entryPoint"><inheritdoc cref="P:CloudServer.Server.DefaultEntryPoint"/></param>
            <param name="cloudPath"><inheritdoc cref="P:CloudServer.Server.DefaultCloudPath"/></param>
            <param name="licenseOEM"><inheritdoc cref="P:CloudServer.Server.DefaultLicenseOEM"/></param>
        </member>
        <member name="P:CloudServer.Server.DefaultEntryPoint">
            <summary>
            The router connection point (ip address or url)
            </summary>
        </member>
        <member name="P:CloudServer.Server.DefaultCloudPath">
            <summary>
            The root location to put cloud data
            </summary>
        </member>
        <member name="P:CloudServer.Server.ProxyPublicKey">
            <summary>
            The public key of the proxy, used to be able to communicate with the proxy via asymmetric encryption. The proxy has the private key for decryption.
            </summary>
        </member>
        <member name="P:CloudServer.Server.DefaultLicenseOEM">
            <summary>
            The license key to log into the router (if the router requires it as an authentication method)
            </summary>
        </member>
        <member name="M:CloudServer.Server.AddCloud">
            <summary>
            Add a new cloud with the next Id available (use the default settings)
            </summary>
            <returns>Id assigned</returns>
        </member>
        <member name="M:CloudServer.Server.AddCloud(System.Int32)">
            <summary>
            Mount or create a cloud to the specified Id (use the default settings)
            </summary>
            <param name="id">Cloud Id</param>
        </member>
        <member name="M:CloudServer.Server.AddCloud(System.String,System.String,System.String)">
            <summary>
            Mount a new cloud and automatic assign an Id (Null parameters will be replaced with default values)
            </summary>
            <param name="entryPoint"><inheritdoc cref="P:CloudServer.Server.DefaultEntryPoint"/></param>
            <param name="cloudPath"><inheritdoc cref="P:CloudServer.Server.DefaultCloudPath"/></param>
            <param name="licenseOEM"><inheritdoc cref="P:CloudServer.Server.DefaultLicenseOEM"/></param>
            <returns>Id assigned</returns>
        </member>
    </members>
</doc>
